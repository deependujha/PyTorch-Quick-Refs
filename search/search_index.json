{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"01-pytorch/01-checkpoint/01-saving-checkpoint/","title":"Pytorch Checkpoint","text":"<pre><code># Additional information\nEPOCH = 5\nPATH = \"model.pt\"\nLOSS = 0.4\n\ntorch.save({\n            'epoch': EPOCH,\n            'model_state_dict': net.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            'loss': LOSS,\n            }, PATH)\n\n# ============================\n\nmodel = Net()\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)\n\ncheckpoint = torch.load(PATH)\nmodel.load_state_dict(checkpoint['model_state_dict'])\noptimizer.load_state_dict(checkpoint['optimizer_state_dict'])\nepoch = checkpoint['epoch']\nloss = checkpoint['loss']\n\nmodel.eval()\n# - or -\nmodel.train()\n</code></pre>"},{"location":"02-python/01-concurrency/01-threadpool/","title":"ThreadPool python concurrency","text":"<p>if you use concurrent.futures.as_completed, you can handle the exception for each function.</p> <pre><code>import concurrent.futures\niterable = [1,2,3,4,6,7,8,9,10]\n\ndef f(x):\n    if x == 2:\n        raise Exception('x')\n    return x\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n    result_futures = list(map(lambda x: executor.submit(f, x), iterable))\n    # -&gt; using `executor.submit()` **requires** calling\n    #      `concurrent.futures.as_completed()` &lt;-\n    #\n    for future in concurrent.futures.as_completed(result_futures):\n        try:\n            print('result is', future.result())\n        except Exception as e:\n            print('e is', e, type(e))\n# result is 3\n# result is 1\n# result is 4\n# e is x &lt;class 'Exception'&gt;\n# result is 6\n# result is 7\n# result is 8\n# result is 9\n# result is 10\n</code></pre> <p>output:</p> <pre><code>[6, 5, 4, 3, 2, 1]\nstart submit 1543473934.47\nsubmitted 1543473934.47\n(5, 1543473939.473743) 1543473939.47\n(6, 1543473940.471591) 1543473940.47\n(3, 1543473943.473639) 1543473943.47\n(4, 1543473943.474192) 1543473943.47\n(1, 1543473944.474617) 1543473944.47\n(2, 1543473945.477609) 1543473945.48\n\nstart map 1543473945.48\nmapped 1543473945.48\n(6, 1543473951.483908) 1543473951.48\n(5, 1543473950.484109) 1543473951.48\n(4, 1543473954.48858) 1543473954.49\n(3, 1543473954.488384) 1543473954.49\n(2, 1543473956.493789) 1543473956.49\n(1, 1543473955.493888) 1543473956.49\n</code></pre>"}]}